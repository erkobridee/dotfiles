#!/bin/sh
source $DOTFILES_DIR/setup/helpers/print_messages.sh
print_set_vars

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help() {
	echo ""
	echo "Usage: $BIN_NAME <command>"
	echo
	echo "Commands:"
	echo "   help             This help message"
	echo "   edit             Open dotfiles in ($EDITOR)"
	echo "   dock             Apply macOS Dock settings"
	echo "   macos            Apply macOS system default"
	echo "   macos ask        Apply macOS asked changes"
	echo "   update           Update packages and pkg managers (OS, brew, npm, gem)"
	echo "   clean            Clean up caches (brew, nvm, gem)"
	echo ""
}

sub_edit() {
	sh -c "$EDITOR $DOTFILES_DIR"
}

sub_update() {
	setup_run brew update
	setup_run brew upgrade

	setup_run npm install npm -g
	setup_run npm update -g

	setup_run sudo gem update --system
	setup_run sudo gem update

	setup_step "Do you want to update your macOS? (it takes time) [Y/n]"
	case $(
		read choice
		echo $choice
	) in
	[nN])
		echo ""
		;;
	[yY] | *)
		echo ""
		setup_run sudo softwareupdate -i -a
		;;
	esac
}

sub_clean() {
	setup_run brew cleanup
	setup_run gem cleanup
	setup_run source "$NVM_DIR/nvm.sh"
	setup_run nvm cache clear
}

sub_macos() {
	# for DEFAULTS_FILE in "${DOTFILES_DIR}"/macos/defaults*.sh; do
	# 	echo "Applying ${DEFAULTS_FILE}" && . "${DEFAULTS_FILE}"
	# done
	# echo "Done. Some changes may require a logout/restart to take effect."

	print_todo "define the macos flow"
}

sub_dock() {
	# . "${DOTFILES_DIR}/macos/dock.sh" && echo "Dock reloaded."

	print_todo "define the dock flow"
}

case $COMMAND_NAME in
"" | "-h" | "--help")
	sub_help
	;;
*)
	shift
	sub_${COMMAND_NAME} $@
	if [ $? = 127 ]; then
		echo "'$COMMAND_NAME' is not a known command or has errors." >&2
		sub_help
		print_unset_vars
		exit 1
	fi
	;;
esac

print_unset_vars
