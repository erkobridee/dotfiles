#!/bin/sh
source $DOTFILES_DIR/setup/helpers/print_messages.sh
print_set_vars

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help() {
	echo ""
	echo "Usage: $BIN_NAME <command>"
	echo
	echo "Commands:"
	echo "   help             This help message"
	echo "   edit             Open dotfiles in ($EDITOR)"
	echo "   dock             Apply macOS Dock settings"
	echo "   macos            Apply macOS system default"
	echo "   macos ask        Apply macOS asked changes"
	echo "   update           Update packages and pkg managers (OS, brew, npm, gem)"
	echo "   clean            Clean up caches (brew, nvm, gem)"
	echo ""
}

sub_edit() {
	sh -c "$EDITOR $DOTFILES_DIR"
}

sub_update() {
	setup_run brew update
	setup_run brew upgrade

	setup_run npm install npm -g
	setup_run npm update -g

	setup_run sudo gem update --system
	setup_run sudo gem update

	setup_step "Do you want to update your macOS? (it takes time) [Y/n]"
	case $(
		read choice
		echo $choice
	) in
	[nN])
		echo ""
		;;
	[yY] | *)
		echo ""
		setup_run sudo softwareupdate -i -a
		;;
	esac
}

sub_clean() {
	setup_run brew cleanup
	setup_run gem cleanup
	setup_run source "$NVM_DIR/nvm.sh"
	setup_run nvm cache clear
}

sub_macos() {
	case "$SUB_COMMAND_NAME" in
	ask)
		setup_run sh $DOTFILES_DIR/setup.sh macos ask
		;;
	*)
		setup_run sh $DOTFILES_DIR/setup.sh macos
		;;
	esac
}

sub_dock() {
	setup_run sh $DOTFILES_DIR/setup.sh dock
}

case $COMMAND_NAME in
"" | "-h" | "--help")
	sub_help
	;;
*)
	shift
	sub_${COMMAND_NAME} $@
	if [ $? = 127 ]; then
		sub_help
		print_fail "'$COMMAND_NAME' is not a known command or has errors."
		print_unset_vars
	fi
	;;
esac

print_unset_vars
